module org.eclipse.xtext.web.example.hello.GenerateHello

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var baseName = "org.eclipse.xtext.web.example.hello"

Workflow {
	
	component = XtextGenerator {
		configuration = HelloGeneratorModule {
			project = StandardProjectConfig {
				rootPath = rootPath
				baseName = baseName
				genericIde = {
					enabled = true
				}
				web = {
					enabled = true
					root   = "../org.eclipse.xtext.web.example.hello.servlet"
					src    = "../org.eclipse.xtext.web.example.hello.servlet/src"
					srcGen = "../org.eclipse.xtext.web.example.hello.servlet/xtext-gen"
					assets = "../org.eclipse.xtext.web.example.hello.servlet/web/webapp"
				}
//				runtimeTest = {
//					enabled = true
//					root = "../org.eclipse.xtext.web"
//					src = "../org.eclipse.xtext.web/src/test/java"
//					srcGen = "../org.eclipse.xtext.web/src/test/xtext-gen"
//				}
			}
			code = {
				encoding = "UTF-8"
				fileHeader = 
"/*******************************************************************************
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/"
			}
		}
//		cleaner = {
//			exclude = "AbstractEntitiesWebModule.java"
//		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/web/example/hello/Hello.xtext"
			fileExtensions = "hello"
			
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment2 {}

			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment2 {}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 {
			    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = exporting.QualifiedNamesFragment2 {}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
			
			// testing API
			fragment = junit.Junit4Fragment2 {
				generateStub = false
			}
			
			// JavaScript-based syntax highlighting

			fragment = web.WebIntegrationFragment {
				framework = "CodeMirror"
				highlightingPath = "xtext/cm-mode-hello.js"
			}
		}
	}
}


//import org.eclipse.xtext.xtext.generator.*
//import org.eclipse.xtext.xtext.generator.model.project.*
//
//var rootPath = ".."
//
//Workflow {
//	
//	component = XtextGenerator {
//		configuration = {
//			project = StandardProjectConfig {
//				baseName = "org.eclipse.xtext.web.example.hello"
//				rootPath = rootPath
//				genericIde = {
//					enabled = true
//				}
//				createEclipseMetaData = true
//			}
//			code = {
//				encoding = "UTF-8"
//				fileHeader = "/*\n * generated by Xtext \${version}\n */"
//			}
//		}
//		language = StandardLanguage {
//			name = "org.eclipse.xtext.web.example.hello.Hello"
//			fileExtensions = "hello"
//
//			serializer = {
//				generateStub = false
//			}
//			validator = {
//				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//			}
//		}
//	}
//}
