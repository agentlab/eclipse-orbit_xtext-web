module org.xtext.example.mydsl.GenerateMyDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var baseName = "org.xtext.example.mydsl"




//Workflow {
//	
//	component = XtextGenerator {
//		configuration = MyDslGeneratorModule {
//			project = StandardProjectConfig {
//				baseName = baseName
//				rootPath = rootPath
//				genericIde = {
//					enabled = true
//				}
////				createEclipseMetaData = true
//				web = {
//					enabled = true
//					root = "../org.xtext.example.mydsl.servlet"
//					src = "../org.xtext.example.mydsl.servlet/src"
//					srcGen = "../org.xtext.example.mydsl.servlet/xtext-gen"
//					assets = "../org.xtext.example.mydsl.servlet/web/webapp"
//				}
//			}
//			
//			code = {
//				encoding = "UTF-8"
//				fileHeader = "/*\n * generated by Xtext \${version}\n */"
//			}
//		}
//		language = StandardLanguage {
////			name = "org.xtext.example.mydsl.MyDsl"
////			fileExtensions = "mydsl"
////
////			serializer = {
////				generateStub = false
////			}
////			validator = {
////				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
////			}
//		
//			grammarUri = "classpath:/org/xtext/example/mydsl/MyDsl.xtext"
//			fileExtensions = "mydsl"
//			
//			// Java API to access grammar elements (required by several other fragments)
//			fragment = grammarAccess.GrammarAccessFragment2 {}
//			
//			// generates Java API for the generated EPackages
//			fragment = ecore.EMFGeneratorFragment2 {}
//			
//			fragment = serializer.SerializerFragment2 {
//				generateStub = false
//			}
//			
//			// a custom ResourceFactory for use with EMF
//			fragment = resourceFactory.ResourceFactoryFragment2 {}
//			
//			// The antlr parser generator fragment.
//			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
//			}
//			
//			// Xtend-based API for validation
//			fragment = validation.ValidatorFragment2 {
//			    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//			}
//			
//			// scoping and exporting API
//			fragment = scoping.ImportNamespacesScopingFragment2 {}
//			fragment = exporting.QualifiedNamesFragment2 {}
//			
//			// generator API
//			fragment = generator.GeneratorFragment2 {}
//			
//			// formatter API
//			fragment = formatting.Formatter2Fragment2 {}
//			
//			// testing API
//			fragment = junit.Junit4Fragment2 {
//				generateStub = false
//			}
//			
//			fragment = web.WebIntegrationFragment {
//				framework = "CodeMirror"
//				highlightingPath = "xtext/cm-mode-mydsl.js"
//			}
//			
//		}
//	}
//}

Workflow {
	
	component = XtextGenerator {
		configuration = MyDslGeneratorModule {
			project = StandardProjectConfig {
				rootPath = rootPath
				baseName = baseName
				genericIde = {
					enabled = true
				}
				web = {
					enabled = true
					root = "../org.xtext.example.mydsl.servlet"
					src = "../org.xtext.example.mydsl.servlet/src"
					srcGen = "../org.xtext.example.mydsl.servlet/xtext-gen"
					assets = "../org.xtext.example.mydsl.servlet/web/webapp"
				}
//				runtimeTest = {
//					enabled = true
//					root = "../org.eclipse.xtext.web"
//					src = "../org.eclipse.xtext.web/src/test/java"
//					srcGen = "../org.eclipse.xtext.web/src/test/xtext-gen"
//				}
			}
			code = {
				encoding = "UTF-8"
				fileHeader = 
"/*******************************************************************************
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/"
			}
		}
		cleaner = {
			exclude = "AbstractEntitiesWebModule.java"
		}
		language = {
			grammarUri = "classpath:/org/xtext/example/mydsl/MyDsl.xtext"
			fileExtensions = "mydsl"
			
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment2 {}

			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment2 {}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 {
			    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = exporting.QualifiedNamesFragment2 {}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
			
			// testing API
			fragment = junit.Junit4Fragment2 {
				generateStub = false
			}
			
			// JavaScript-based syntax highlighting
//			fragment = web.WebIntegrationFragment {
//				framework = "Orion"
//				highlightingPath = "xtext/mydsl-syntax.js"
//			}
//			fragment = web.WebIntegrationFragment {
//				framework = "Ace"
//				highlightingPath = "xtext/ace-mode-mydsl.js"
//			}
			fragment = web.WebIntegrationFragment {
				framework = "CodeMirror"
				highlightingPath = "xtext/cm-mode-mydsl.js"
			}
		}
	}
}

